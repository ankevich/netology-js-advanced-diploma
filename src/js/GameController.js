import themes from "./themes";
import GameState from "./GameState";
import GamePlay from "./GamePlay";

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.gameState = new GameState(8);
  }

  init() {
    // -------------------------------------
    // –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    // -------------------------------------

    this.gamePlay.drawUi(this.gameState.currentTheme);
    this.gamePlay.redrawPositions(this.gameState.positions);

    // -------------------------------------
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
    // -------------------------------------

    // –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–ª–µ—Ç–∫—É
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));

    // –í—ã—Ö–æ–¥ –∏–∑ –∫–ª–µ—Ç–∫–∏
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));

    // –ö–ª–∏–∫ –ø–æ –∫–ª–µ—Ç–∫–µ
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));

    // -------------------------------------
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ –∏–≥—Ä—ã
    // -------------------------------------

    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–∫–µ New Game
    this.gamePlay.addNewGameListener(this.onNewGame.bind(this));

    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Save Game
    this.gamePlay.addSaveGameListener(this.onSaveGame.bind(this));

    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Load Game
    this.gamePlay.addLoadGameListener(this.onLoadGame.bind(this));
  }

  onCellEnter(index) {
    if (this.gameState.isGameOver()) { return; }
    
    const character = this.gameState.getCharacterAt(index);
    const selection = this.gameState.currentSelection;

    // -------------------------------------
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º tooltip
    // -------------------------------------
    if (character) {
      const message = `${character.type}: üéñ${character.level} ‚öî${character.attack} üõ°${character.defence} ‚ù§${character.health} ü¶∂${character.range}`;
      this.gamePlay.showCellTooltip(message, index);
    }

    // -------------------------------------
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
    // -------------------------------------
    if (
      // –ü–µ—Ä—Å–æ–Ω–∞–∂ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω
      (selection == null && // –ù–∞ –ø–æ–ª–µ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character && // –í –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂
        this.isCharacterInPlayerTeam(character)) || // –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞ // –ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω, –Ω–æ –º—ã —Ö–æ—Ç–∏–º –¥—Ä—É–≥–æ–≥–æ
      (selection && // –ù–∞ –ø–æ–ª–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        selection.position != index && // –ü–æ–∑–∏—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π (–Ω–µ—Ç —Å–º—ã—Å–ª–∞ –≤—ã–±–∏—Ä–∞—Ç—å —á—Ç–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ)
        character && // –í –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂
        this.isCharacterInPlayerTeam(character)) // –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
    ) {
      this.gamePlay.setCursor("pointer"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤—ã–±–æ—Ä–∞
    }

    // -------------------------------------
    // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∑–µ–ª–µ–Ω—ã–º –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∫–ª–µ—Ç–∫—É
    // -------------------------------------
    if (
      character == null && // –ö–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è
      selection && // –í—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂
      selection.position != index && // –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–∑–∏—Ü–∏–µ–π –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.isInRange(index, selection.position, selection.character.range) // –ö–ª–µ—Ç–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    ) {
      this.gamePlay.setCursor("pointer"); // –°–¥–µ–ª–∞—Ç—å –∫—É—Ä—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
      this.gamePlay.selectCell(index, "green"); // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –ø–æ–ª–µ –∑–µ–ª–µ–Ω—ã–º
    }

    // -------------------------------------
    // –ü–æ–∫–∞–∑–∞—Ç—å –∞—Ç–∞–∫—É –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
    // -------------------------------------
    if (
      character && // –í –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂
      this.isCharacterInEnemyTeam(character) && // –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      selection && // –ï—Å—Ç—å –∞—Ç–∞–∫—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂
      selection.position != index && // –ê—Ç–∞–∫—É–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–∑–∏—Ü–∏–µ–π –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.isInRange(index, selection.position, selection.character.range) // –ö–ª–µ—Ç–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    ) {
      this.gamePlay.setCursor("crosshair"); // –ö—É—Ä—Å–æ—Ä –ø—Ä–∏—Ü–µ–ª
      this.gamePlay.selectCell(index, "red"); // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –ø–æ–ª–µ –∫—Ä–∞—Å–Ω—ã–º
    } else if (
      character && // –í –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂
      selection && // –ï—Å—Ç—å –∞—Ç–∞–∫—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂
      selection.position != index && // –ê—Ç–∞–∫—É–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–∑–∏—Ü–∏–µ–π –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.isCharacterInEnemyTeam(character) && // –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      this.isInRange(index, selection.position, selection.character.range) ==
        null // –ö–ª–µ—Ç–∫–∞ –ù–ï –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è
    ) {
      this.gamePlay.setCursor("not-allowed");
    }
  }

  onCellClick(index) {
    if (this.gameState.isGameOver()) { return; }

    const selection = this.gameState.currentSelection;
    const clickedCharacter = this.gameState.getCharacterAt(index);

    // –ù–µ –∫–ª–∏–∫–∞—Ç—å –µ—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –ø–æ —É–∂–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
    if (
      clickedCharacter != null &&
      selection != null &&
      clickedCharacter == selection.character
    ) {
      return;
    }

    // –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (clickedCharacter && this.isCharacterInPlayerTeam(clickedCharacter)) {
      this.deSelect();
      this.gamePlay.selectCell(index);
      this.gameState.select(clickedCharacter);
    }

    // –ó–∞–ø—Ä–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä —á—É–∂–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    else if (
      clickedCharacter &&
      selection == null &&
      this.isCharacterInEnemyTeam(clickedCharacter)
    ) {
      GamePlay.showError("–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞");
    }

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    else if (
      selection && // –í—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂
      clickedCharacter == null && // –ö–ª–µ—Ç–∫–∞ –Ω–∏–∫–µ–º –Ω–µ –∑–∞–Ω—è—Ç–∞
      this.isInRange(index, selection.position, selection.character.range) // –ö–ª–µ—Ç–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    ) {
      this.gamePlay.deselectCell(selection.position);
      this.gameState.moveSelectedCharacterTo(index);
      this.gamePlay.deselectCell(index);
      this.gamePlay.redrawPositions(this.gameState.positions);
      this.deSelect();
      this.gameState.currentPlayer = "computer";
      this.computerTurn();
    }

    // –ê—Ç–∞–∫–∞
    else if (
      selection && // –í—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂
      this.isCharacterInEnemyTeam(clickedCharacter) && // –ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      this.isInRange(index, selection.position, selection.character.range) // –ö–ª–µ—Ç–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    ) {
      this.gamePlay.deselectCell(index);
      const damage = this.calculateDamage(
        selection.character,
        clickedCharacter
      );
      this.gameState.attack({ character: clickedCharacter }, damage);
      this.gamePlay.showDamage(index, damage).then(() => {
        this.gamePlay.redrawPositions(this.gameState.positions);
        this.deSelect();
        this.gameState.currentPlayer = "computer";
        this.computerTurn();
      });
    }

    this.gameLoop();
  }

  onCellLeave(index) {
    const selection = this.gameState.currentSelection;

    this.gamePlay.hideCellTooltip(index);
    this.gamePlay.setCursor("default");
    if (selection && selection.position != index) {
      this.gamePlay.deselectCell(index);
    }
  }

  computerTurn() {
    if (this.gameState.currentPlayer != "computer") {
      return;
    }

    // –í–∑—è—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    const character =
      this.gameState.computerTeam[
        Math.floor(Math.random() * this.gameState.computerTeam.length)
      ];

    const positionedAi = this.gameState.positions.find(
      (pc) => pc.character == character
    );

    // –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
    const nearestPlayer = this.gameState.positions
      .filter((pc) => this.isCharacterInPlayerTeam(pc.character))
      .reduce((nearest, player) => {
        const distance = this.getDistance(
          player.position,
          positionedAi.position
        );
        const nearestDistance = this.getDistance(
          nearest.position,
          positionedAi.position
        );
        return distance < nearestDistance ? player : nearest;
      });

    // –ï—Å–ª–∏ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏, —Ç–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å
    if (
      this.getDistance(positionedAi.position, nearestPlayer.position) <=
      character.range
    ) {
      const damage = this.calculateDamage(character, nearestPlayer.character);
      this.gameState.attack(nearestPlayer, damage);
      this.gamePlay.showDamage(nearestPlayer.position, damage).then(() => {
        this.gameState.currentPlayer = "player";
        this.gamePlay.redrawPositions(this.gameState.positions);
      });
    } else {
      // –ï—Å–ª–∏ –Ω–µ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏, —Ç–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –±–ª–∏–∂–µ –∫ –∏–≥—Ä–æ–∫—É
      this.moveCloser(positionedAi, nearestPlayer.position);
      this.gamePlay.redrawPositions(this.gameState.positions);
    }

    this.gameLoop();
    return;
  }

  moveCloser({ character, position }, targetPosition) {
    const boardSize = 8;

    const x = position % boardSize;
    const y = Math.floor(position / boardSize);

    const targetX = targetPosition % boardSize;
    const targetY = Math.floor(targetPosition / boardSize);

    const directionX = x < targetX ? 1 : -1;
    const directionY = y < targetY ? 1 : -1;

    const dx = Math.abs(x - targetX);
    const dy = Math.abs(y - targetY);

    const moveX = directionX * Math.min(dx, character.range);
    const moveY = directionY * Math.min(dy, character.range);

    var newX = x + moveX;
    var newY = y + moveY;

    var newIndex = newY * boardSize + newX;

    // check if new position is free
    while (this.isPositionFree(newIndex) == false) {
      newX -= directionX;
      if (this.isPositionFree(newX * boardSize + newY)) {
        newIndex = newX * boardSize + newY;
      } else {
        newY -= directionY;
        newIndex = newY * boardSize + newX;
      }
    }

    // –ò—â–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø–æ–∑–∏—Ü–∏—è—Ö
    const index = this.gameState.positions.findIndex(
      (pc) => pc.character == character
    );

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂—É –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    this.gameState.positions[index].position = newIndex;

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
    this.gamePlay.redrawPositions(this.gameState.positions);

    return;
  }

  calculateDamage = (attacker, defendant) =>
    Math.max(attacker.attack - defendant.defence, attacker.attack * 0.1);

  isInRange = (indexA, indexB, range) =>
    this.getDistance(indexA, indexB) <= range;

  getDistance(a, b) {
    const boardSize = 8;

    const x1 = Math.floor(a / boardSize);
    const y1 = a % boardSize;

    const x2 = Math.floor(b / boardSize);
    const y2 = b % boardSize;

    const dx = Math.abs(x1 - x2);
    const dy = Math.abs(y1 - y2);

    return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
  }

  deSelect() {
    const selection = this.gameState.currentSelection;
    if (selection != null) {
      this.gamePlay.deselectCell(selection.position);
      this.gameState.currentSelection = null;
    }
  }

  isPositionFree = (index) =>
    this.gameState.positions.find((pc) => pc.position == index) ? false : true;

  isCharacterInPlayerTeam = (character) =>
    this.gameState.playerTeam.includes(character);

  isCharacterInEnemyTeam = (character) =>
    this.gameState.computerTeam.includes(character);

  gameLoop = () => {
    if(this.gameState.isGameOver()) {
      return
    }

    if (this.gameState.isLevelOver()) {
      this.gameState.nextLevel();
      this.gamePlay.drawUi(this.gameState.currentTheme);
      this.gamePlay.redrawPositions(this.gameState.positions);  
    }
  }

  onNewGame() {
    this.gameState.resetState();
    this.gamePlay.drawUi(this.gameState.currentTheme);
    this.gamePlay.redrawPositions(this.gameState.positions);
  }

  onSaveGame() {
    this.stateService.save(this.gameState.asObject());
    this.gamePlay.drawUi(this.gameState.currentTheme);
    this.gamePlay.redrawPositions(this.gameState.positions);
  }

  onLoadGame() {
    const gameState = this.stateService.load();
    if (gameState) {
      this.gameState.restoreFrom(gameState);
    }
    this.gamePlay.drawUi(this.gameState.currentTheme);
    this.gamePlay.redrawPositions(this.gameState.positions);
  }
}
